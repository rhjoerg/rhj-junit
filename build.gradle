
def setNameAndDescription(pom, prj) {

	pom.withXml {
	
		println prj.name
		println prj.ext.title
		println prj.ext.description
		
		asNode().get('name')[0].setValue(prj.ext.title)
		asNode().get('description')[0].setValue(prj.ext.description)
	}
}
	
subprojects {

	apply plugin: 'java-library'
	apply plugin: 'signing'
	apply plugin: 'maven'
	
	version '0.3.0-SNAPSHOT'
	group 'ch.rhj.junit'
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	ext.localRepository = new File(new File(System.getProperty('user.home')), 'repository').toURL()
	
	repositories {
	
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/groups/public/' }
		maven { url 'https://oss.sonatype.org/content/groups/staging' }
	}

	dependencies {
	
		compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0'

		testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0'
		testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.1.0'
	}
	
	test {
	
		useJUnitPlatform()
	}

	task sourcesJar(type: Jar) {
	
		from sourceSets.main.allJava
		classifier 'sources'
	}
	
	task javadocJar(type: Jar, dependsOn: 'javadoc') {
	
		from javadoc
		classifier 'javadoc'
	}

	artifacts {
	
		archives sourcesJar, javadocJar
	}
	
	signing {
	
		useGpgCmd()
		
		sign configurations.archives
	}
	
	uploadArchives.dependsOn check
	
	uploadArchives {
	
		repositories {
		
			mavenDeployer {
			
				beforeDeployment {
				
					MavenDeployment deployment -> signing.signPom(deployment)
				}
				
				repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
			
				snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
			
				//repository(url: localRepository)
				//snapshotRepository(url: localRepository)
				
				pom {
				
					project {
					
						url 'https://github.com/rhjoerg/rhj-junit'
						name 'none'
						description 'none'
						
						developers {
						
							developer {
							
								id 'rhjoerg'
								name 'Roger H. JÃ¶rg'
								email 'rhjoerg@gmail.com'
							}
						}
						
						scm {
						
							connection 'scm:git:git://github.com/rhjoerg/rhj-junit.git'
							developerConnection 'scm:git:ssh://github.com:rhjoerg/rhj-junit.git'
							url 'https://github.com/rhjoerg/rhj-junit/tree/master'
						}
							
						issueManagement {
						
							system 'Github'
							url 'https://github.com/rhjoerg/rhj-junit/issues'
						}
					
						licenses {
						
							license {
							
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
					}
					
					whenConfigured {
					
						p ->
							p.dependencies = p.dependencies.findAll { d -> d.scope != 'test' }
							setNameAndDescription p, project
					}
				}
			}
		}
	}
}
